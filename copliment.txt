#include<iostream>
using namespace std;

struct Node{
   bool bit;
   struct Node *next;
   struct Node *prev;
};

typedef struct Node node;
class binary
{
   private:
           node *head,*last;
           int n;
   public:
           binary();
           ~binary();
           void create();
           void display();
           void ones_complement();
           void twos_complement();
           void insertnode_beg(node *newnode);
           void insertnode_end(node *newnode);
           void addition(binary);
};

binary::binary()
{
    head=NULL;
    last=NULL;
}

binary::~binary()
{
    node* temp=head;
    node *t;

    while(temp!=NULL)
    {
        t=temp;
        temp=temp->next;
        delete t;
    }
}

void binary::create()
{
    node *temp;
    cout<<"\n Enter number of bits in binary number : ";
    cin>>n;
    cout<<"\n Enter Binary Number : "<<endl;
    for( int i=0;i<n; i++)
    {
       node* newnode=new node;
       newnode->next=NULL;
       newnode->prev=NULL;
       cin>>newnode->bit;

       if(head==NULL){
           head=newnode;
           last=newnode;
       }
       else{
          temp=head;
          while(temp->next!=NULL)    
              temp=temp->next;

          temp->next=newnode;
          newnode->prev=temp;
          last=newnode;
       }

    }
}

void binary::display()
{
    node *temp1;
    temp1=head;
    while(temp1!=NULL)
    {
        cout<<temp1->bit;
        temp1=temp1->next;
    }

}

void binary::insertnode_end(node* newnode)
{
     node *last;
    if(head==NULL)
        head=newnode;
    else
    {
        last=head;
        while(last->next!=NULL)
            last=last->next;

        last->next=newnode;
        newnode->prev=last;
    }
}

void binary::ones_complement()
{
    node *temp,*newnode;
    binary ones;
    temp=head;
    while(temp!=NULL)
    {
        newnode=new node;
        newnode->next=NULL;
        newnode->prev=NULL;
        if(temp->bit== 0)
            newnode->bit=1;
        else
            newnode->bit=0;
        ones.insertnode_end(newnode);
        temp=temp->next;
    }
    cout<<"\n\t 1's Complement : ";
    ones.display();

}

void binary::twos_complement()
{
    binary n2;
    node *temp,*newnode;
    bool carry=1;
    for(temp=last; temp!=NULL; temp=temp->prev)
    {
        newnode=new node;
        newnode->next=NULL;
        newnode->prev=NULL;

        if(carry==1)
        {
            if(temp->bit == 1)
            {
                newnode->bit=1;
                carry=0;
            }
            else
                newnode->bit=0;
        }
        else
        {
            if(temp->bit == 1)
                newnode->bit=0;
            else
                newnode->bit=1;
        }
        n2.insertnode_beg(newnode);

    }
    cout<<"\n 2's Complement : ";
    n2.display();

}

void binary::insertnode_beg(node *newnode)
{
    if(head==NULL)
        head=newnode;
    else
    {
        newnode->next=head;
        head->prev=newnode;
        head=newnode;
    }

}

void binary::addition(binary b2)
{
    binary b3;
    node *temp1, *temp2, *newnode;
    temp1=this->last;
    temp2=b2.last;
    bool carry=0;
    while(temp1!= NULL && temp2!= NULL)
    {
        newnode=new node;
        newnode->next=NULL;
        newnode->prev=NULL;
        if(carry == 1)
        {
            if(temp1->bit == 1 && temp2->bit == 1)
            {
                newnode->bit=1;
            }
            else if(temp1->bit ==0 && temp2->bit==0)
            {
                newnode->bit=1;
                carry=0;
            }
            else
                newnode->bit=0;
        }
        else{
            if(temp1->bit== 1 &&temp2->bit==1)
            {
                newnode->bit=0;
                carry=1;
            }
            else if(temp1->bit==0 && temp2->bit==0)
                newnode->bit=0;
            else
                newnode->bit=1;
        }
        b3.insertnode_beg(newnode);
        temp1=temp1->prev;
        temp2=temp2->prev;
    }

    while(temp1!=NULL)
    {
        newnode=new node;
        newnode->next=NULL;
        newnode->prev=NULL;
        if( carry==1)
        {
            if(temp1->bit==1)
                newnode->bit = 0;
            else
            {
                newnode->bit=1;
                carry=0;
            }
        }
        else
            newnode->bit=temp1->bit;
        b3.insertnode_beg(newnode);
        temp1=temp1->prev;
    }

    while(temp2!=NULL)
    {
        newnode=new node;
        newnode->next=NULL;
        newnode->prev=NULL;
        if( carry==1)
        {
            if(temp2->bit==1)
                newnode->bit = 0;
            else
            {
                newnode->bit=1;
                carry=0;
            }
        }
        else
            newnode->bit=temp2->bit;
        b3.insertnode_beg(newnode);
        temp2=temp2->prev;
    }
    if (carry==1)
    {
        newnode=new node;
        newnode->next=NULL;
        newnode->prev=NULL;
        newnode->bit=1;
        b3.insertnode_beg(newnode);
    }
    cout<<"\n Addition of binary numbers : ";
    b3.display();
}

int main()
{
    int ch;
    binary b1,b2;
    do
    {
        cout<<"\n";
        cout<<"\n\t 1. Input Binary Number ";
        cout<<"\n\t 2. Display Number ";
        cout<<"\n\t 3. 1's Complement ";
        cout<<"\n\t 4. 2's Complement";
        cout<<"\n\t 5. Addition of Binary Numbers ";
        cout<<"\n\t 6. Exit ";
        cout<<"\n\t Enter your Choice : ";
        cin>>ch;
        switch(ch)
        {
        case 1: b1.create();
                break;

        case 2: b1.display();
                break;

        case 3: cout<<"\n\t First binary number  :";
                b1.display();
                b1.ones_complement();
                break;

        case 4: cout<<"\n\t First binary number  :";
                b1.display();
                b1.twos_complement();
                break;

        case 5: cout<<"\n\t Enter Second binary Number : ";
                b2.create();
                cout<<"\n\t First binary number  :";
                b1.display();
                cout<<"\n\t Second binary number :";
                b2.display();
                b1.addition(b2);
                break;

        case 6: cout<<"\n End of program ";
                break;
        default:cout<<"\n Invalid Choice !!";
        }

    }while(ch!=6);
  return 0;
}


